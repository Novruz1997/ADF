{
	"name": "2_df_Hospital_Admissions",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_DataLake_Hospital_Data",
						"type": "DatasetReference"
					},
					"name": "SourceGetHospitalData"
				},
				{
					"dataset": {
						"referenceName": "ds_DataLake_Country_Lookup_ForDataFlow",
						"type": "DatasetReference"
					},
					"name": "SourceCountryLookup"
				},
				{
					"dataset": {
						"referenceName": "ds_DataLake_DimDateLookUp",
						"type": "DatasetReference"
					},
					"name": "SourceDimDateLookUp"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_DataLake_Hospital_Weekly",
						"type": "DatasetReference"
					},
					"name": "SinkWeekly"
				},
				{
					"dataset": {
						"referenceName": "ds_DataLake_Hospital_Daily",
						"type": "DatasetReference"
					},
					"name": "SinkDaily"
				}
			],
			"transformations": [
				{
					"name": "SelectColumns"
				},
				{
					"name": "CountryLookUp"
				},
				{
					"name": "SelectCols"
				},
				{
					"name": "ConditionalSplitWeeklyDaily"
				},
				{
					"name": "DerivedColumnYearToWeek"
				},
				{
					"name": "AggregrateDimDate"
				},
				{
					"name": "JoinWithDimDate"
				},
				{
					"name": "PivotWeeklyIndicator"
				},
				{
					"name": "PivotDailyIndicator"
				},
				{
					"name": "SortDaily"
				},
				{
					"name": "sortWeekly"
				},
				{
					"name": "SelectColumnsSink"
				},
				{
					"name": "selectColumnSink"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          indicator as string,",
				"          date as date,",
				"          year_week as string,",
				"          value as double,",
				"          source as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SourceGetHospitalData",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SourceCountryLookup",
				"source(output(",
				"          date_key as string,",
				"          date as string,",
				"          year as string,",
				"          month as string,",
				"          day as string,",
				"          day_name as string,",
				"          day_of_year as string,",
				"          week_of_month as string,",
				"          week_of_year as string,",
				"          month_name as string,",
				"          year_month as string,",
				"          year_week as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SourceDimDateLookUp",
				"SourceGetHospitalData select(mapColumn(",
				"          country,",
				"          indicator,",
				"          value,",
				"          source,",
				"          each(match(name==\"date\"),",
				"               \"reported_\"+$$ = $$),",
				"          each(match(name==\"year_week\"),",
				"               \"reported_\"+$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectColumns",
				"SelectColumns, SourceCountryLookup lookup(SelectColumns@country == SourceCountryLookup@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> CountryLookUp",
				"CountryLookUp select(mapColumn(",
				"          country = SelectColumns@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          reported_year_week,",
				"          source,",
				"          indicator,",
				"          value",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectCols",
				"SelectCols split(indicator == \"Weekly new hospital admissions per 100k\" || indicator == \"Weekly new ICU admissions per 100k\",",
				"     disjoint: false) ~> ConditionalSplitWeeklyDaily@(weekly, daily)",
				"SourceDimDateLookUp derive(ecdc_year_week = year + \"-W\" + lpad(week_of_year, 2, \"0\")) ~> DerivedColumnYearToWeek",
				"DerivedColumnYearToWeek aggregate(groupBy(ecdc_year_week),",
				"     week_start = min(date),",
				"          week_end = max(date)) ~> AggregrateDimDate",
				"ConditionalSplitWeeklyDaily@weekly, AggregrateDimDate join(reported_year_week == ecdc_year_week,",
				"     joinType:'inner',",
				"     broadcast: 'auto')~> JoinWithDimDate",
				"JoinWithDimDate pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          reported_year_week,",
				"          source,",
				"          ecdc_year_week,",
				"          week_start,",
				"          week_end),",
				"     pivotBy(indicator, ['Weekly new hospital admissions per 100k', 'Weekly new ICU admissions per 100k']),",
				"     count = sum(value),",
				"     columnNaming: '$N_$V',",
				"     lateral: true) ~> PivotWeeklyIndicator",
				"ConditionalSplitWeeklyDaily@daily pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          reported_year_week,",
				"          source),",
				"     pivotBy(indicator, ['Daily hospital occupancy', 'Daily ICU occupancy']),",
				"     count = sum(value),",
				"     columnNaming: '$N_$V',",
				"     lateral: true) ~> PivotDailyIndicator",
				"PivotDailyIndicator sort(desc(reported_date, true),",
				"     asc(country, true)) ~> SortDaily",
				"PivotWeeklyIndicator sort(desc(reported_date, true),",
				"     asc(country, true)) ~> sortWeekly",
				"sortWeekly select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_year_week,",
				"          source,",
				"          reported_week_start_date = week_start,",
				"          reported_week_end_date = week_end,",
				"          new_hospital_occupancy_count = {count_Weekly new hospital admissions per 100k},",
				"          new_icu_occupancy_count = {count_Weekly new ICU admissions per 100k}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectColumnsSink",
				"SortDaily select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_date,",
				"          source,",
				"          hospital_occupancy_count = {count_Daily hospital occupancy},",
				"          icu_occupancy_count = {count_Daily ICU occupancy}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectColumnSink",
				"SelectColumnsSink sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['weekly_hospital_admissions.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> SinkWeekly",
				"selectColumnSink sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['daily_hospital_admissions.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> SinkDaily"
			]
		}
	}
}